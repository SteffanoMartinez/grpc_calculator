# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import calculator_pb2 as calculator__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in calculator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class CalculatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addition = channel.unary_unary(
                '/calculator.Calculator/addition',
                request_serializer=calculator__pb2.AdditionRequest.SerializeToString,
                response_deserializer=calculator__pb2.AdditionResponse.FromString,
                _registered_method=True)
        self.substraction = channel.unary_unary(
                '/calculator.Calculator/substraction',
                request_serializer=calculator__pb2.SubstractionRequest.SerializeToString,
                response_deserializer=calculator__pb2.SubstractionResponse.FromString,
                _registered_method=True)
        self.multiplication = channel.unary_unary(
                '/calculator.Calculator/multiplication',
                request_serializer=calculator__pb2.MultiplicationRequest.SerializeToString,
                response_deserializer=calculator__pb2.MultiplicationResponse.FromString,
                _registered_method=True)
        self.division = channel.unary_unary(
                '/calculator.Calculator/division',
                request_serializer=calculator__pb2.DivisionRequest.SerializeToString,
                response_deserializer=calculator__pb2.DivisionResponse.FromString,
                _registered_method=True)
        self.exponential = channel.unary_unary(
                '/calculator.Calculator/exponential',
                request_serializer=calculator__pb2.ExponentialRequest.SerializeToString,
                response_deserializer=calculator__pb2.ExponentialResponse.FromString,
                _registered_method=True)


class CalculatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def substraction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def multiplication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def division(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exponential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addition': grpc.unary_unary_rpc_method_handler(
                    servicer.addition,
                    request_deserializer=calculator__pb2.AdditionRequest.FromString,
                    response_serializer=calculator__pb2.AdditionResponse.SerializeToString,
            ),
            'substraction': grpc.unary_unary_rpc_method_handler(
                    servicer.substraction,
                    request_deserializer=calculator__pb2.SubstractionRequest.FromString,
                    response_serializer=calculator__pb2.SubstractionResponse.SerializeToString,
            ),
            'multiplication': grpc.unary_unary_rpc_method_handler(
                    servicer.multiplication,
                    request_deserializer=calculator__pb2.MultiplicationRequest.FromString,
                    response_serializer=calculator__pb2.MultiplicationResponse.SerializeToString,
            ),
            'division': grpc.unary_unary_rpc_method_handler(
                    servicer.division,
                    request_deserializer=calculator__pb2.DivisionRequest.FromString,
                    response_serializer=calculator__pb2.DivisionResponse.SerializeToString,
            ),
            'exponential': grpc.unary_unary_rpc_method_handler(
                    servicer.exponential,
                    request_deserializer=calculator__pb2.ExponentialRequest.FromString,
                    response_serializer=calculator__pb2.ExponentialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calculator.Calculator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('calculator.Calculator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Calculator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/calculator.Calculator/addition',
            calculator__pb2.AdditionRequest.SerializeToString,
            calculator__pb2.AdditionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def substraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/calculator.Calculator/substraction',
            calculator__pb2.SubstractionRequest.SerializeToString,
            calculator__pb2.SubstractionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def multiplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/calculator.Calculator/multiplication',
            calculator__pb2.MultiplicationRequest.SerializeToString,
            calculator__pb2.MultiplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def division(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/calculator.Calculator/division',
            calculator__pb2.DivisionRequest.SerializeToString,
            calculator__pb2.DivisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exponential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/calculator.Calculator/exponential',
            calculator__pb2.ExponentialRequest.SerializeToString,
            calculator__pb2.ExponentialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
